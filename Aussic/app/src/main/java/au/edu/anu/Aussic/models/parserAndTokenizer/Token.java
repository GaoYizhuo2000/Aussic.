package au.edu.anu.Aussic.models.parserAndTokenizer;

/**
 * Learn from the code of lab6
 *
 * The `Token` class represents a token in the token stream generated by the `Tokenizer`.
 * Each token has a type and a token representation in string form.
 *
 * The available token types are:
 * - `STRING`: Represents a generic string token.
 * - `ARTISTNAME`: Represents an artist name token (e.g., \a token).
 * - `SONGNAME`: Represents a song name token (e.g., \s token).
 * - `GENRE`: Represents a genre token (e.g., \g token).
 * - `RELEASEDATE`: Represents a release date token (e.g., \r token).
 * - `SEMICOLON`: Represents a semicolon token.
 * - `USER`: Represents a user token.
 *
 * Example usage:
 * ```java
 * Token token = new Token("\\a Adele", Token.Type.ARTISTNAME);
 * String tokenValue = token.getToken(); // Returns "\\a Adele"
 * Token.Type tokenType = token.getType(); // Returns Token.Type.ARTISTNAME
 * ```
 *
 * @author u7581818, Oscar Wei
 */

public class Token {
    public enum Type {STRING, ARTISTNAME, SONGNAME, GENRE, RELEASEDATE, SEMICOLON, USER} // \a, \s, \g, \r
    private final String token; // Token representation in String form.
    private final Type type;    // Type of the token.

    /**
     * Constructs a `Token` object with a specified token representation and type.
     *
     * @param token The string representation of the token.
     * @param type  The type of the token (one of the enum values).
     */
    public Token(String token, Type type) {
        this.token = token;
        this.type = type;
    }

    /**
     * Gets the string representation of the token.
     *
     * @return The token in string form.
     */
    public String getToken() {
        return token;
    }

    /**
     * Gets the type of the token.
     *
     * @return The type of the token.
     */
    public Type getType() {
        return type;
    }
}
